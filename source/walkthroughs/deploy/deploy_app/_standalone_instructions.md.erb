<%
if language_type == :meteor
  app_dirname = "bundle"
else
  app_dirname = "code"
end
%>

<%=
result = {}
output = render_partial("/walkthroughs/deploy/deploy_app/preamble.md", locals: locals.merge(result: result))
header_step = result[:header_step]
output
%>

<%
header_step += 1
substep = 0
%>
<%= h2(id_prefix, "#{header_step} Starting the app in Passenger") %>

Now that you are done with transferring your app's code to the server and setting up an environment for your app, it is time to start your app in Passenger.

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Create a Passenger config file") %>

Since this is a production environment, we need to customize Passenger a little bit. Go to your application's
<% if language_type == :meteor -%>
  package directory
<% else -%>
  code directory
<% end -%>
and create a file named `Passengerfile.json`:

<pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/<%= app_dirname %>
<% if needs_login_as_app_user_to_prepare_environment?(locals) %>
<span class="prompt">$ </span>nano Passengerfile.json
<% else -%>
<span class="prompt">$ </span>sudo nano Passengerfile.json
<% end -%></pre>

Insert:

<pre class="highlight javascript"><span class="p">{</span>
<% if language_type == :python -%>
  <span class="c1">// Tell Passenger that this is a <%= language_name %> app.</span>
  <span class="c1">// Replace "passenger_wsgi.py" with your app's WSGI entry point file.</span>
  <span class="s2">"app_type"</span><span class="p">:</span> <span class="s2">"wsgi"</span><span class="p">,</span>
  <span class="s2">"startup_file"</span><span class="p">:</span> <span class="o">"passenger_wsgi.py"</span><span class="p">,</span>
  <span class="c1">// Replace "python3" the python interpreter you wish to use.</span>
  <span class="s2">"python"</span><span class="p">:</span> <span class="s2">"python3"</span><span class="p">,</span>
<% elsif language_type == :nodejs -%>
  <span class="c1">// Tell Passenger that this is a <%= language_name %> app.</span>
  <span class="c1">// Replace "app.js" with your app's entry point file.</span>
  <span class="s2">"app_type"</span><span class="p">:</span> <span class="s2">"node"</span><span class="p">,</span>
  <span class="s2">"startup_file"</span><span class="p">:</span> <span class="o">"app.js"</span><span class="p">,</span>
<% elsif language_type == :meteor -%>
  <span class="c1">// Tell Passenger that this is a <%= language_name %> app.</span>
  <span class="s2">"app_type"</span><span class="p">:</span> <span class="s2">"node"</span><span class="p">,</span>
  <span class="s2">"startup_file"</span><span class="p">:</span> <span class="s2">"main.js"</span><span class="p">,</span>
  <span class="s2">"envvars"</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// Tell your app where MongoDB is</span>
    <span class="s2">"MONGO_URL"</span><span class="p">:</span> <span class="s2">"mongodb://localhost:27017/<span class="o">myappdb</span>"</span><span class="p">,</span>
    <span class="c1">// Tell your app what its root URL is</span>
    <span class="s2">"ROOT_URL"</span><span class="p">:</span> <span class="s2">"<span class="o">http://yourserver.com</span>"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="c1">// Store log and PID file in parent directory</span>
  <span class="s2">"log_file"</span><span class="p">:</span> <span class="s2">"<span class="o">../passenger.log</span>"</span>,
  <span class="s2">"pid_file"</span><span class="p">:</span> <span class="s2">"<span class="o">../passenger.pid</span>"</span>
<% end -%>
  <span class="c1">// Run the app in a production environment. The default value is "development".</span>
  <span class="s2">"environment"</span><span class="p">:</span> <span class="s2">"production"</span><span class="p">,</span>
  <span class="c1">// Run Passenger on port 80, the standard HTTP port.</span>
  <span class="s2">"port"</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>
  <span class="c1">// Tell Passenger to daemonize into the background.</span>
  <span class="s2">"daemonize"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="c1">// Tell Passenger to run the app as the given user. Only has effect</span>
  <span class="c1">// if Passenger was started with root privileges.</span>
  <span class="s2">"user"</span><span class="p">:</span> <span class="s2">"<span class="o">myappuser</span>"</span>
<span class="p">}</span></pre>

Replace `myappuser` with your app's user account name.
<% if language_type == :meteor -%>
Replace `myappdb` with an appropriate MongoDB database name. Also be sure to set `ROOT_URL` to an appropriate value.
<% end -%>

<% if !needs_login_as_app_user_to_prepare_environment?(locals) %>
  Finally, fix the permissions on the file:

  <pre class="highlight"><span class="prompt">$ </span>sudo chown <span class="o">myappuser</span>: Passengerfile.json</pre>
<% end %>

<% if needs_login_as_app_user_to_prepare_environment?(locals) %>
<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Go back to the admin account") %>

You have previously logged into your app's user account in order to prepare the app's environment. That user does not have sudo access. In the next steps, you need to start Passenger with root privileges, for which sudo access is needed. So you need to switch back to the admin account.

This can be done by simply exiting the shell that was logged into the app's user account. You will then be dropped back to the admin account. For example:

<pre class="highlight"><span class="c"># This is what you previously ran:</span>
<span class="output">admin$ sudo -u myappuser -H bash -l
myappuser$ ...</span>

<span class="c"># Type `exit` to go back to the account you were before</span>
<span class="prompt">myappuser$ </span>exit
<span class="prompt">admin$</span> _</pre>
<% end %>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Start Passenger Standalone") %>

While in your application's code directory, start Passenger. As configured, it will start on port 80 and will daemonize into the background.

Note that, because Passenger is configured to listen on port 80, this command must be run with root privileges. Only root privileged processes can listen on ports lower than 1024.

<% if language_type == :ruby %>
  <pre class="highlight app_details app_details_rvm"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/<%= app_dirname %>
<span class="prompt">$ </span>rvmsudo <%= passenger_command_prefix(locals) %>passenger start</pre>
  <pre class="highlight app_details app_details_nonrvm"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/<%= app_dirname %>
<span class="prompt">$ </span>sudo <%= passenger_command_prefix(locals) %>passenger start</pre>
<% else %>
  <pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/<%= app_dirname %>
<span class="prompt">$ </span>sudo <%= passenger_command_prefix(locals) %>passenger start</pre>
<% end %>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Test drive") %>

You should now be able to access your app through the server's host name! Try running this from your local computer. Replace `yourserver.com` with your server's hostname.

<pre class="highlight"><span class="prompt">$ </span>curl http://yourserver.com/
<span class="output">...your app's front page HTML...</span></pre>

If you do not see your app's front page HTML, then the most likely cause is that you did not setup DNS records. Setting up DNS is outside the scope of this tutorial. In the mean time, we recommend that you use your server's IP address as the server name.

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Make sure Passenger Standalone starts on system boot") %>

Passenger is now running and serving your app, but that only lasts until you reboot your server. So you must configure your server to start Passenger Standalone on system boot.

<!-- NOTE: Making /etc/rc.local executable is necessary on Red Hat 7, where it is disabled by default because of the lack of executable bit. -->

The easiest way to do that is to add it to the file `/etc/rc.local`. This script is called during system boot. Ensure that it's executable and open it in a text editor:

<pre class="highlight"><span class="prompt">$ </span>sudo chmod +x /etc/rc.local
<span class="prompt">$ </span>sudo nano /etc/rc.local</pre>

Here is an example of what you may want to add to `/etc/rc.local`. If there is an `exit` command in rc.local, make sure you add these before the exit command.

<pre class="highlight">
<span class="c">#!/bin/sh</span>
<% if locals[:os_config_type] == :tarball %>
<span class="c"># Since you installed Passenger from tarball, add its `bin` directory to PATH.</span>
<span class="nb">export</span> <span class="nv">PATH</span>=<span class="o">/path-to-passenger</span>/bin:<span class="nv">$PATH</span>

<% end -%>
<span class="c"># Change working directory to your webapp.</span>
<span class="nb">cd</span> /var/www/<span class="o">myapp</span>/<%= app_dirname %>

<span class="c"># Start Passenger Standalone in daemonized mode. Passenger will be started as
# root when run from this file, but Passengerfile.json tells it to drop its
# privileges to a normal user.</span>
<% if language_type == :ruby -%>
<span class="app_details app_details_rvm"><span class="c"># Replace '<%= LATEST_RUBY_VERSION %>' with the Ruby version you want your app to run under.</span>
/usr/local/rvm/bin/rvm-exec ruby-<span class="o"><%= LATEST_RUBY_VERSION %></span> \
  <%= passenger_command_prefix(locals) %>passenger start</span><span class="app_details app_details_nonrvm"><%= passenger_command_prefix(locals) %>passenger start</span>
<% else -%>
<%= passenger_command_prefix(locals) %>passenger start
<% end -%>
</pre>
